//----------------------------------------------------------------------
// [Creation of Allocations]
//
// Every named variable of the original source code will have a
// corresponsing `alloca_instruction` that allocates space for it in
// the stack. Hence, we can use these instructions to track stack
// allocations. Additionally, we have to create stack allocations for
// parameters with pass-by-value semantics.
//
// Heap allocations on the other side will be created primarily by
// calling `@malloc` or other similar memory allocating
// functions. More heap allocation functions could be added in the
// future.
//----------------------------------------------------------------------


//---------------------------------------------------------------------
// [Stack Allocations]
//
// Note that the type of a stack allocation is always noted locally at
// either the allocation site, or by the parameter's type.
//---------------------------------------------------------------------

stack_allocation(Alloc) -> allocation:type[Alloc] = _.

/// 1. Alloca Instructions

alloc_context(ACtx)
 , alloc_context:new[Item] = ACtx
 , stack_allocation(StackAlloc)
 , stack_allocation:by_instruction[Instr] = StackAlloc
 , var_points_to(ACtx, StackAlloc, Ctx, Var)
 <-
   alloca_instruction(Instr),
   instruction:to[Instr] = Var,
   instruction:function[Instr] = InstrFunc,
   reachable_context(Ctx, InstrFunc),
   // Extra
   (context:__getitem0__[Ctx] = Item;
   context:__getitem1__[Ctx] = Item).


allocation:type[StackAlloc] = Type <-
   alloca_instruction(Insn),
   alloca_instruction:type[Insn] = Type,
   stack_allocation:by_instruction[Insn] = StackAlloc.


/// 2. Parameters with pass-by-value semantics

alloc_context(ACtx)
 , alloc_context:new[Item] = ACtx
 , stack_allocation(StackAlloc)
 , stack_allocation:by_parameter[Func, Index] = StackAlloc
 , var_points_to(ACtx, StackAlloc, Ctx, Param)
 <-
   function:param_by_value(Func, Index),
   function:param[Func, Index] = Param,
   reachable_context(Ctx, Func),
   // Extra
   (context:__getitem0__[Ctx] = Item;
   context:__getitem1__[Ctx] = Item).


allocation:type[StackAlloc] = Type <-
   stack_allocation:by_parameter[Func, Index] = StackAlloc,
   function:type[Func] = FuncType,
   function_type:param[FuncType, Index] = ParamType,
   pointer_type:component[ParamType] = Type.



//---------------------------------------------------------------------
// [Heap Allocations]
//
// In contrast to the other types of allocations, an allocation on the
// heap is not always associated with a type (at least locally).
//---------------------------------------------------------------------

alloc_context(ACtx)
 , alloc_context:new[Item] = ACtx
 , heap_allocation(HeapAlloc)
 , heap_allocation:by_instruction[Instr] = HeapAlloc
 , var_points_to(ACtx, HeapAlloc, Ctx, Var)
 <-
   heap_alloc_function(Func),
   ( call_instruction:function[Instr] = Func
   ; invoke_instruction:function[Instr] = Func),
   instruction:to[Instr] = Var,
   instruction:function[Instr] = InstrFunc,
   reachable_context(Ctx, InstrFunc),
   // Extra
   (context:__getitem0__[Ctx] = Item;
   context:__getitem1__[Ctx] = Item).

// Functions that allocate memory on heap
heap_alloc_function(Func) -> function_decl(Func).

heap_alloc_function(Func) <-
   function:by_name["@malloc"]  = Func
 ; function:by_name["@calloc"]  = Func
 ; function:by_name["@realloc"] = Func.


// Heap allocations by type of function

heap_allocation:by_malloc[Insn] = HeapAlloc <-
   function:by_name["@malloc"] = Func,
   call_instruction:function[Insn] = Func,
   heap_allocation:by_instruction[Insn] = HeapAlloc.

heap_allocation:by_calloc[Insn] = HeapAlloc <-
   function:by_name["@calloc"] = Func,
   call_instruction:function[Insn] = Func,
   heap_allocation:by_instruction[Insn] = HeapAlloc.

heap_allocation:by_realloc[Insn] = HeapAlloc <-
   function:by_name["@realloc"] = Func,
   call_instruction:function[Insn] = Func,
   heap_allocation:by_instruction[Insn] = HeapAlloc.


// !! Track heap allocation types !! Note that a single heap
// allocation is just a series of bytes, which can flow to multiple
// variables of different types in principle.
//
// Consider a generic wrapper to @malloc (that calls @malloc inside
// its body). This allocation inside the wrapper function will flow to
// all sorts of places that have nothing to do with each other, and
// will probably involve many heterogeneous types.

heap_allocation:types(Type, ACtx, HeapAlloc) <-
   heap_allocation(HeapAlloc),
   operand_points_to(ACtx, HeapAlloc, _, Var),
   operand:type[Var] = PtrType,
   pointer_type:component[PtrType] = Type.


//---------------------------------------------------------------------
// [Global Allocations]
//
// Note that the type of a global allocation is readily available at
// any case.
//---------------------------------------------------------------------

global_allocation(Alloc) -> allocation:type[Alloc] = _.

/// 1. Global variable allocations

global_allocation(Alloc),
global_allocation:by_variable[GVar] = Alloc
 <-
   global_variable(GVar).

allocation:type[Alloc] = Type <-
   global_allocation:by_variable[GVar] = Alloc,
   global_variable:type[GVar] = Type.


/// 2. Function Allocations

global_allocation(Alloc),
global_allocation:by_function[Func] = Alloc
 <-
   function(Func).

// We also create allocations of functions for which we lack any
// definition, e.g., functions that belong to dynamically linked
// libraries

global_allocation(Alloc),
global_allocation:by_function[Func] = Alloc
 <-
   function_decl(Func),
   !function:definition[Func] = _.

allocation:type[Alloc] = Type <-
   global_allocation:by_function[Func] = Alloc,
   function:type[Func] = Type.


//----------------------------------
// [Additional pseudo-allocations]
//----------------------------------

/// 1. Unknown Memory Special Object (may point to anything)

unknown_location[] = Unknown
 , non_allocation(Unknown)
 , allocation:to_string[Unknown] = "*unknown*"
 <- .

// An unknown location points to an unknown location

ptr_points_to(ACtx, Unknown, ACtx, Unknown) <-
   empty_alloc_context[] = ACtx,
   unknown_location[] = Unknown.

unknown_location[] = Unknown
 , empty_alloc_context[] = EmptyCtx
 , ptr_points_to(ACtx, To, _, Unknown)
 ->
   To = Unknown, ACtx = EmptyCtx.


/// 2. Null Special Object

null_location[] = Null
 , non_allocation(Null)
 , allocation:to_string[Null] = "*null*"
 <- .

// Null cannot point to anything

null_location[] = Null -> !ptr_points_to(_, _, _, Null).


//------------------------------------------------------------------------------
// [Sanity checks]
//
// Only empty contexts are associated with global and pseudo-allocs.
//------------------------------------------------------------------------------

_allocation_with_context(ACtx, Alloc) <-
   var_points_to(ACtx, Alloc, _, _).

_allocation_with_context(ACtx, Alloc) <-
   ptr_points_to(ACtx, Alloc, _, _).

_allocation_with_context(ACtx, Alloc) <-
   ptr_points_to(_, _, ACtx, Alloc).

unknown_location[] = Unknown
 , empty_alloc_context[] = EmptyContext
 , _allocation_with_context(ACtx, Unknown)
 ->
   ACtx = EmptyContext.

null_location[] = Null
 , empty_alloc_context[] = EmptyContext
 , _allocation_with_context(ACtx, Null)
 ->
   ACtx = EmptyContext.

global_allocation(Alloc)
 , empty_alloc_context[] = EmptyContext
 , _allocation_with_context(ACtx, Alloc)
 ->
   ACtx = EmptyContext.


//------------------------------------------------
// [Allocation String Representation Protocol]
//------------------------------------------------

// Every allocation must have a string representation
allocation(Alloc) -> allocation:to_string[Alloc] = _.

// Human readable representation for stack allocations

allocation:to_string[Alloc] = Str <-
   stack_allocation:by_instruction[Insn] = Alloc,
   instruction:to[Insn] = Var,
   variable:descriptor(Var, _, Func, Type, Name),
   Str = "*stack_alloc" + Func + "[" + Type + " " + Name + "]".

allocation:to_string[Alloc] = Str <-
   stack_allocation:by_parameter[Func, Index] = Alloc,
   function:param[Func, Index] = Param,
   variable:descriptor(Param, _, FuncSign, Type, Name),
   Str = "*stack_alloc" + FuncSign + "[" + Type + " " + Name + "]".

// Human readable representation for heap allocations

allocation:to_string[Alloc] = Str <-
   heap_allocation:by_instruction[Insn] = Alloc,
   instruction:to[Insn] = Var,
   variable:descriptor(Var, _, Func, Type, Name),
   Str = "*heap_alloc" + Func + "[" + Type + " " + Name + "]".

// Human readable representation for global variable allocations

allocation:to_string[Alloc] = Str <-
   global_allocation:by_variable[GVar] = Alloc,
   global_variable:name[GVar] = Name,
   Str = "*global_alloc" + Name.

// Human readable representation for function allocations

allocation:to_string[Alloc] = Str <-
   global_allocation:by_function[Func] = Alloc,
   function:name[Func] = Name,
   Str = "*global_alloc" + Name.


//------------------------------------------------
// [Allocation Position Info]
//------------------------------------------------

allocation:pos(Alloc, Line, Column) <-
   stack_allocation:by_instruction[Insn] = Alloc,
   instruction:pos(Insn, Line, Column).

allocation:pos(Alloc, Line, Column) <-
   stack_allocation:by_parameter[Func, Index] = Alloc,
   function:param[Func, Index] = Param,
   variable:debug:decl_pos(Param, Line, Column).

allocation:pos(Alloc, Line, Column) <-
   heap_allocation:by_instruction[Insn] = Alloc,
   instruction:pos(Insn, Line, Column).

// TODO: retrieve global variable position info
//
// allocation:pos(Alloc, Line, Column) <-
//    global_allocation:by_variable[GVar] = Alloc,
//    .

// allocation:pos(Alloc, Line, Column) <-
//    global_allocation:by_function[Func] = Alloc,
//    .
